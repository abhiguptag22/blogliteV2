{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Login_page',\n  data: function () {\n    return {\n      email: null,\n      password: null,\n      notvalid: false,\n      access_token: \"\",\n      wrongPass: false\n    };\n  },\n  methods: {\n    async loginHandle() {\n      if (this.email == null || this.password == null) {\n        this.notvalid = true;\n      } else {\n        const loginRequest = await fetch(\"http://localhost:5000/logins\", {\n          method: 'POST',\n          body: JSON.stringify({\n            email: this.email,\n            password: this.password\n          }),\n          headers: {\n            \"Content-type\": \"application/json; charset-UTF-8\"\n          }\n        });\n        const jResponse = await loginRequest.json();\n        if (jResponse.token) {\n          localStorage.setItem('token', jResponse.token);\n          console.log(jResponse.token);\n          document.body.style.backgroundColor = '#f2f2f2';\n          this.$router.push({\n            name: 'home'\n          });\n        } else {\n          this.notvalid = false;\n          this.wrongPass = true;\n        }\n      }\n    },\n    handleCreateLink() {\n      this.$router.push({\n        name: 'sign_up'\n      });\n    }\n  },\n  mounted: function () {\n    console.log(\"here\");\n    document.body.style.backgroundColor = '#000038';\n    localStorage.removeItem(\"taskId\");\n  }\n};","map":{"version":3,"mappings":";AA8BA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;QACA;MACA,OACA;QACA;UACAC;UACAC;YACAP;YACAC;UACA;UACAO;YACA;UACA;QACA;QAEA;QAEA;UACAC;UACAC;UACAC;UACA;YAAAb;UAAA;QACA,OACA;UACA;UACA;QACA;MAEA;IACA;IACAc;MACA;QAAAd;MAAA;IACA;EACA;EACAe;IACAH;IACAC;IAEAF;EACA;AACA","names":["name","data","email","password","notvalid","access_token","wrongPass","methods","method","body","headers","localStorage","console","document","handleCreateLink","mounted"],"sourceRoot":"src/components","sources":["Login_page.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"login-box\">\r\n            <div class=\"row\">\r\n                <div class=\"col-5\">\r\n                    <img src=\"../assets/img/logo.png\" class=\"logo\" alt=\"\">\r\n                </div>\r\n                <div class=\"col-7\">\r\n                    <div class=\"login-heading\">\r\n                        <h3>Log in</h3>\r\n                    </div>\r\n                    <div class=\"login-form\">\r\n                        <input type=\"email\" placeholder=\"Enter your email-address\" v-model=\"email\">\r\n                        <br><br>\r\n                        <input type=\"password\" placeholder=\"Enter your password\" v-model=\"password\">\r\n                        <br><br>\r\n                        <b-button id=\"login-btn\" @click=\"loginHandle\">Log in</b-button>\r\n                        <br><br>\r\n                        <p v-if=\"notvalid\" class=\"red\"> &#x2022; Please input valid details.</p>\r\n                        <p v-if=\"wrongPass\" class=\"red\"> &#x2022; Email and password combination does not match.</p>\r\n                        <br><br>\r\n                        <p class=\"create-btn\" @click=\"handleCreateLink\">Create a New Account</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default  {\r\n    name: 'Login_page',\r\n    data : function() {\r\n        return {\r\n            email:null,\r\n            password:null,\r\n            notvalid:false,\r\n            access_token:\"\",\r\n            wrongPass:false\r\n        }\r\n    },\r\n    methods : {\r\n        async loginHandle() {\r\n            if (this.email==null || this.password == null) {\r\n                this.notvalid=true\r\n            }\r\n            else {\r\n            const loginRequest = await fetch(\"http://localhost:5000/logins\", {\r\n                method:'POST',\r\n                body: JSON.stringify({\r\n                        email: this.email,\r\n                        password: this.password\r\n                        }),\r\n                headers: {\r\n                \"Content-type\": \"application/json; charset-UTF-8\",\r\n                }\r\n            })\r\n        \r\n            const jResponse = await loginRequest.json()\r\n\r\n            if (jResponse.token) {\r\n                localStorage.setItem('token', jResponse.token)\r\n                console.log(jResponse.token)\r\n                document.body.style.backgroundColor = '#f2f2f2'\r\n                this.$router.push({name:'home'})\r\n            }\r\n            else {\r\n                this.notvalid=false\r\n                this.wrongPass=true\r\n            }\r\n\r\n            }\r\n        },\r\n        handleCreateLink() {\r\n            this.$router.push({name:'sign_up'})\r\n        }\r\n    },\r\n    mounted: function() {\r\n            console.log(\"here\")\r\n            document.body.style.backgroundColor = '#000038'\r\n            \r\n            localStorage.removeItem(\"taskId\")\r\n        }\r\n}\r\n</script>\r\n\r\n<style>\r\n.login-box {\r\n    width:700px;\r\n    height: 450px;\r\n    margin-top: 100px;\r\n    background-color: white;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border-radius: 15px;\r\n}\r\n.col-7 {\r\n    height: 450px;\r\n    border-left: 3px solid gray;\r\n}\r\n.logo {\r\n    margin-top: 170px;\r\n    margin-left: 15px;\r\n    height: 125px;\r\n    width: auto;\r\n}\r\n.login-heading {\r\n    margin-top: 40px;\r\n}\r\n.login-form {\r\n    margin-top: 70px;\r\n\r\n}\r\n.login-form input {\r\n    border-top-style: hidden;\r\n    border-left-style: hidden;\r\n    border-right-style: hidden;\r\n    border-bottom-style: groove;\r\n    background-color: #f3f3f3;\r\n    width: 300px;\r\n    height: 45px;\r\n\r\n}\r\ninput:focus {\r\n    outline: none;\r\n}\r\n#login-btn {\r\n    background-color: #000038;\r\n}\r\n.create-btn {\r\n    color: rgb(104, 102, 102);\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}